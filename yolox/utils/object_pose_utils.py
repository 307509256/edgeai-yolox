import torch
import numpy as np
from os import path
from plyfile import PlyData
from loguru import logger
from math import cos, sin
from .dist import get_local_rank

class_to_name = {0: "ape", 1: "can", 2: "cat", 3: "driller", 4: "duck", 5: "eggbox", 6: "glue", 7: "holepuncher", 8: "benchvise", 9: "bowl", 10: "cup", 11: "iron", 12: "lamp", 13: "phone", 14: "cam"}
class_to_cuboid = [
    np.array([[-37.9343, -38.7996, 45.8845], [-37.9343, 38.7996, 45.8845], [37.9343, 38.7996, 45.8845], [37.9343, -38.7996, 45.8845],
    [-37.9343, -38.7996, -45.8845], [-37.9343, 38.7996, -45.8845], [37.9343, 38.7996, -45.8845], [37.9343, -38.7996, -45.8845]]),
    np.array([[-107.835, -60.9279, 109.705], [-107.835, 60.9279, 109.705], [107.835, 60.9279, 109.705], [107.835, -60.9279, 109.705],
    [-107.835, -60.9279, -109.705], [-107.835, 60.9279, -109.705], [107.835, 60.9279, -109.705], [107.835, -60.9279, -109.705]]),
    np.array([[-83.2162, -82.6591, 37.2364], [-83.2162, 82.6591, 37.2364], [83.2162, 82.6591, 37.2364], [83.2162, -82.6591, 37.2364],
    [-83.2162, -82.6591, -37.2364], [-83.2162, 82.6591, -37.2364], [83.2162, 82.6591, -37.2364], [83.2162, -82.6591, -37.2364]]),
    np.array([[-68.3297, -71.5151, 50.2485], [-68.3297, 71.5151, 50.2485], [68.3297, 71.5151, 50.2485], [68.3297, -71.5151, 50.2485],
    [-68.3297, -71.5151, -50.2485], [-68.3297, 71.5151, -50.2485], [68.3297, 71.5151, -50.2485], [68.3297, -71.5151, -50.2485]]),
    np.array([[-50.3958, -90.8979, 96.867], [-50.3958, 90.8979, 96.867], [50.3958, 90.8979, 96.867], [50.3958, -90.8979, 96.867],
    [-50.3958, -90.8979, -96.867], [-50.3958, 90.8979, -96.867], [50.3958, 90.8979, -96.867], [50.3958, -90.8979, -96.867]]),
    np.array([[-33.5054, -63.8165, 58.7283], [-33.5054, 63.8165, 58.7283], [33.5054, 63.8165, 58.7283], [33.5054, -63.8165, 58.7283],
    [-33.5054, -63.8165, -58.7283], [-33.5054, 63.8165, -58.7283], [33.5054, 63.8165, -58.7283], [33.5054, -63.8165, -58.7283]]),
    np.array([[-58.7899, -45.7556, 47.3112], [-58.7899, 45.7556, 47.3112], [58.7899, 45.7556, 47.3112], [58.7899, -45.7556, 47.3112],
    [-58.7899, -45.7556, -47.3112], [-58.7899, 45.7556, -47.3112], [58.7899, 45.7556, -47.3112], [58.7899, -45.7556, -47.3112]]),
    np.array([[-114.738, -37.7357, 104.001], [-114.738, 37.7357, 104.001], [114.738, 37.7357, 104.001], [114.738, -37.7357, 104.001],
    [-114.738, -37.7357, -104.001], [-114.738, 37.7357, -104.001], [114.738, 37.7357, -104.001], [114.738, -37.7357, -104.001]]),
    np.array([[-52.2146, -38.7038, 42.8485], [-52.2146, 38.7038, 42.8485], [52.2146, 38.7038, 42.8485], [52.2146, -38.7038, 42.8485],
    [-52.2146, -38.7038, -42.8485], [-52.2146, 38.7038, -42.8485], [52.2146, 38.7038, -42.8485], [52.2146, -38.7038, -42.8485]]),
    np.array([[-75.0923, -53.5375, 34.6207], [-75.0923, 53.5375, 34.6207], [75.0923, 53.5375, 34.6207], [75.0923, -53.5375, 34.6207],
    [-75.0923, -53.5375, -34.6207], [-75.0923, 53.5375, -34.6207], [75.0923, 53.5375, -34.6207], [75.0923, -53.5375, -34.6207]]),
    np.array([[-18.3605, -38.933, 86.4079], [-18.3605, 38.933, 86.4079], [18.3605, 38.933, 86.4079], [18.3605, -38.933, 86.4079],
    [-18.3605, -38.933, -86.4079], [-18.3605, 38.933, -86.4079], [18.3605, 38.933, -86.4079], [18.3605, -38.933, -86.4079]]),
    np.array([[-50.4439, -54.2485, 45.4], [-50.4439, 54.2485, 45.4], [50.4439, 54.2485, 45.4], [50.4439, -54.2485, 45.4],
    [-50.4439, -54.2485, -45.4], [-50.4439, 54.2485, -45.4], [50.4439, 54.2485, -45.4], [50.4439, -54.2485, -45.4]]),
    np.array([[-129.113, -59.241, 70.5662], [-129.113, 59.241, 70.5662], [129.113, 59.241, 70.5662], [129.113, -59.241, 70.5662],
    [-129.113, -59.241, -70.5662], [-129.113, 59.241, -70.5662], [129.113, 59.241, -70.5662], [129.113, -59.241, -70.5662]]),
    np.array([[-101.573, -58.8763, 106.558], [-101.573, 58.8763, 106.558], [101.573, 58.8763, 106.558], [101.573, -58.8763, 106.558],
    [-101.573, -58.8763, -106.558], [-101.573, 58.8763, -106.558], [101.573, 58.8763, -106.558], [101.573, -58.8763, -106.558]]),
    np.array([[-46.9591, -73.7167, 92.3737], [-46.9591, 73.7167, 92.3737], [46.9591, 73.7167, 92.3737], [46.9591, -73.7167, 92.3737],
    [-46.9591, -73.7167, -92.3737], [-46.9591, 73.7167, -92.3737], [46.9591, 73.7167, -92.3737], [46.9591, -73.7167, -92.3737]])
]

def calculate_model_rotation(point_cloud, rvec):
    #rvec = rvec.cpu()
    point_cloud = point_cloud.to(device="cuda:{}".format(get_local_rank()))
    theta = float(rvec.norm(dim = 0))
    if theta != 0:
        k = rvec / theta
    else:
        k = 0 * rvec
    rows = int(point_cloud.shape[0])
    k_cross = torch.tensor([]).to(device="cuda:{}".format(get_local_rank()))
    for _ in range(rows):
        k_cross = torch.cat((k_cross, k))
    k_cross = k_cross.reshape(rows, 3)
    k = k.reshape(1, 3)

    points_transformed = point_cloud * cos(theta) + torch.cross(k_cross, point_cloud) * sin(theta) + k_cross * torch.mm(point_cloud, k.transpose(0, 1)) * (1 - cos(theta))
    return points_transformed

def load_models(models_datapath, class_to_name=class_to_name):
    class_to_model = {class_id: None for class_id in class_to_name.keys()}
    logger.info("Loading 3D models...")

    for class_id, name in class_to_name.items():
        file = "obj_{:02}.ply".format(class_id + 1)
        model_datapath = path.join(models_datapath, file)

        if not path.isfile(model_datapath):
            logger.warning(
                "The file {} model for class {} was not found".format(file, name)
            )
            continue

        model_3D = load_model_point_cloud(model_datapath)
        class_to_model[class_id] = torch.from_numpy(model_3D).half()

    return class_to_model 

def load_model_point_cloud(datapath):
    model = PlyData.read(datapath)
                                  
    vertex = model['vertex']
    points = np.stack([vertex[:]['x'], vertex[:]['y'], vertex[:]['z']], axis = -1).astype(np.float64)
        
    return points